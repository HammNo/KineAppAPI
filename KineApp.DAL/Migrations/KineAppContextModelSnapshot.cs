// <auto-generated />
using System;
using KineApp.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KineApp.DAL.Migrations
{
    [DbContext(typeof(KineAppContext))]
    partial class KineAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KineApp.DL.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Salt")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c0a36d2-a6a3-4a8a-810d-ada70d83bfbb"),
                            Email = "admin@mail.be",
                            EncodedPassword = new byte[] { 234, 29, 159, 110, 62, 6, 94, 139, 52, 81, 38, 29, 205, 126, 139, 83, 140, 220, 202, 207, 166, 127, 172, 156, 145, 6, 246, 65, 175, 190, 94, 118, 60, 19, 101, 59, 195, 182, 156, 67, 54, 186, 70, 32, 252, 167, 100, 127, 96, 69, 200, 116, 249, 91, 242, 253, 53, 22, 236, 79, 151, 63, 46, 76 },
                            Name = "Admin",
                            Role = 0,
                            Salt = new Guid("4a32933f-7e38-4797-aeae-49b3907dc723")
                        });
                });

            modelBuilder.Entity("KineApp.DL.Entities.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<Guid>("WeekId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WeekId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("KineApp.DL.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("KineApp.DL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("ValidationCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e694aa88-c4d5-4e86-9f08-13ac1b001873"),
                            Email = "test@mail.com",
                            FirstName = "Firsty",
                            Gender = 2,
                            LastName = "Zero",
                            PhoneNumber = "0111111111"
                        });
                });

            modelBuilder.Entity("KineApp.DL.Entities.Week", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstDay")
                        .HasColumnType("Date");

                    b.Property<DateTime>("LastDay")
                        .HasColumnType("Date");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Weeks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68018c84-cdf5-4b1b-a40c-ccbf817393a1"),
                            FirstDay = new DateTime(2021, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastDay = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KineApp.DL.Entities.Day", b =>
                {
                    b.HasOne("KineApp.DL.Entities.Week", "Week")
                        .WithMany("Days")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Week");
                });

            modelBuilder.Entity("KineApp.DL.Entities.TimeSlot", b =>
                {
                    b.HasOne("KineApp.DL.Entities.Day", "Day")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KineApp.DL.Entities.User", "User")
                        .WithMany("TimeSlots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Day");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KineApp.DL.Entities.Day", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("KineApp.DL.Entities.User", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("KineApp.DL.Entities.Week", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
